# 🐳 StockFlow Backend - Development Dockerfile
# Multi-stage build optimized for development with hot-reload

FROM node:20-alpine as development

# 🔧 Install system dependencies for development
RUN apk add --no-cache \
    curl \
    dumb-init \
    && rm -rf /var/cache/apk/*

# 📁 Set working directory
WORKDIR /app

# 👥 Create non-root user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodeuser -u 1001 -G nodejs

# 📦 Copy package files first (Docker layer caching optimization)
COPY --chown=nodeuser:nodejs package*.json ./

# 🚀 Install ALL dependencies (including devDependencies for development)
RUN npm ci --include=dev && \
    npm cache clean --force

# 📝 Copy source code (this layer changes frequently, so it's last)
COPY --chown=nodeuser:nodejs . .

# 🛠️ Build TypeScript (if needed in dev for some tools)
# RUN npm run build

# 🔒 Switch to non-root user
USER nodeuser

# 🌐 Expose port
EXPOSE 5000

# 🚀 Health check for Docker Compose
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:5000/health || exit 1

# 🎯 Start development server with hot reload
# Using dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]
CMD ["npm", "run", "dev"]
